buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

// Plugins
plugins {
    id 'simpleconfig.conventions'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply from: 'antlr.gradle'

// Mod info -----------------------------------------------------------------------

def mod_id = ext.mod_id,
    api_project = project(":api"),
    mod_version = ext.mod_version,
    mc_version = ext.mc_version
group = ext.mod_group
version = "$mc_version-$mod_version"
println "mod_version: $version"
def group_slashed = group.replaceAll("\\.", "/"),
    classname = "SimpleConfigMod",
    maven_artifact = ext.mod_maven_artifact

// Attributes
def display_name = "Simple Config",
    vendor = ext.vendor,
    credits = "",
    authors = "Endor H",
    issue_tracker = "",
    page = "",
    update_json = "",
    logo_file = "${mod_id}.png",
    description = '''
Provides a simple way for modders to define config files with autogenerated config menus and commands.
Can also provide, or even replace config menus of other mods.
Users can assign hotkeys to modify config values from within the game, and easily save and apply partial presets, which can be shared on the server.
To edit server configs, players need to be authorized, or be top level operators.

Optionally adds a button to the pause menu, which opens the mod list in order to access mod configs ingame. It's also possible to bind a hotkey to open the mod list, edit config hotkeys, or open a specific config menu.
'''

// License
def license = "LGPL"

// Dependencies
def antlr_version = "4.9.1",
    // FIXME: Update to 1.31 when available (bitbucket.org/snakeyaml/snakeyaml/issues/518)
    yaml_version = "1.30",
    jei_version = "7.6.1.75"

// Jar attributes
archivesBaseName = ext.mod_archive_base_name

def jar_attributes = [
    "Specification-Title"     : mod_id,
    "Specification-Vendor"    : vendor,
    "Specification-Version"   : "1",
    "Implementation-Title"    : project.name,
    "Implementation-Version"  : version,
    "Implementation-Vendor"   : vendor,
    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    "Maven-Artifact"          : maven_artifact
]

def mod_properties = [
    modid: mod_id,
    display: display_name,
    version: project.version,
    mcversion: ext.mc_version,
    vendor: vendor,
    authors: authors,
    credits: credits,
    license: license,
    page: page,
    issue_tracker: issue_tracker,
    update_json: update_json,
    logo_file: logo_file,
    description: description,
    group: group,
    class_name: classname,
    group_slashed: group_slashed,
]

// Java options -------------------------------------------------------------------

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

// Minecraft options --------------------------------------------------------------

minecraft {
    // Run configurations
    runs {
        client {
            workingDirectory project.file('run/client')

            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "mixin.env.disableRefMap", "true"

            mods {
                simpleconfig {
                    source sourceSets.main
                    source project(":api").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "mixin.env.disableRefMap", "true"

            arg "nogui"

            mods {
                simpleconfig {
                    source sourceSets.main
                }
            }
        }

        client2 {
            parent(getByName("client"))
            args "--username", "Dev2"
        }
    }
}

// Source Sets --------------------------------------------------------------------

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Project dependencies -----------------------------------------------------------

repositories {
    maven {
        name = "ModMaven" // JEI fallback
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    compileOnly project(":api")
    // Forge doesn't pick the FMLModType manifest attribute for runs, unless we
    //   explicitly use the jar as dependency, after moving it from its default
    //   location. (Gradle maybe caches classes for internal jar dependencies?)
    runtimeOnly api_project.files("$api_project.buildDir/api.jar")

    // ANTLR
    antlr "org.antlr:antlr4:$antlr_version" // use ANTLR version 4
    antlr "org.antlr:antlr4-runtime:$antlr_version"

    // Snake yaml
    implementation "org.yaml:snakeyaml:$yaml_version"

    // Testing dependencies
    // Catalogue
    runtimeOnly fg.deobf("curse.maven:catalogue-459701:3529457")

    // Configured
    runtimeOnly fg.deobf("curse.maven:configured-457570:3780620")

    // JEI
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
}

test {
    useJUnitPlatform()
}

// Tasks --------------------------------------------------------------------------

classes.dependsOn extractNatives // Make sure the natives are extracted on compile

// The API is automatically included in the shadow jar
shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(jar_attributes)
    }

    dependencies {
        include dependency("org.antlr:antlr4:$antlr_version")
        include dependency("org.antlr:antlr4-runtime:$antlr_version")
        include dependency("org.yaml:snakeyaml:$yaml_version")
    }

    // Relocate the root package
    relocate "org.antlr", "endorh.simpleconfig.shadowed.org.antlr"
    relocate "org.yaml.snakeyaml", "endorh.simpleconfig.shadowed.org.yaml.snakeyaml"

    classifier '' // Replace default jar

    // Preferred method to reobfuscate the jar file
    finalizedBy 'reobfShadowJar'
}

reobf {
    shadowJar {}
}

// Jar attributes
jar {
    manifest {
        attributes(jar_attributes)
        attributes 'Maven-Artifact': "$maven_artifact:deobf"
    }

    classifier 'unshadowed'

    // Preferred method to reobfuscate the jar file
    finalizedBy 'reobfJar'
}

artifacts {
    archives shadowJar
    // archives deobfJar
}

// Process resources
processResources {
    inputs.properties mod_properties
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // Exclude development files
    exclude("**/.dev/**")
    from(sourceSets.main.resources.srcDirs) {
        filesMatching(["**/*.toml", "**/*.mcmeta"]) {
            expand mod_properties
        }
        filesMatching("**/*.json") {
            if (!getPath().contains("/lang/"))
                expand mod_properties
        }
    }
}

// Publishing
publishing {
    publications {
        mod(MavenPublication) {
            artifact shadowJar
            // artifact sourcesJar

            pom {
                name = display_name
                url = page
                properties = [
                    description: description
                ]
            }
        }
    }
    repositories {
        maven {
            name "LocalMods"
            url "${rootProject.projectDir.parentFile.toURI()}maven"
        }
    }
    println "Local mods maven repository: ${rootProject.projectDir.parentFile.toURI()}maven"
}
