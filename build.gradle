buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

// Plugins
plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'net.minecraftforge.gradle'
apply from: 'antlr.gradle'

// Mod info -----------------------------------------------------------------------

def mod_id = "simpleconfig"
group = "endorh.simpleconfig"
version = "1.16.5-0.7.4"
def group_slashed = project.group.replaceAll("\\.", "/"),
    classname = "SimpleConfigMod",
    maven_artifact = "${group}:${mod_id}:${version}"

// Attributes
def display_name = "Simple Config",
    vendor = "Endor H",
    credits = "",
    authors = "Endor H",
    issue_tracker = "",
    page = "",
    update_json = "",
    logo_file = "${mod_id}.png",
    description = '''
Provides a simple way for modders to define config files with autogenerated
config GUIs.

Optionally adds a button to the pause menu, which opens the mod list in order to
access mod configs ingame.
'''

// License
def license = "LGPL"

// Dependencies
def mc_version = "1.16.5",
    forge = "36.1.0",
    forge_version = "${mc_version}-${forge}",
    antlr_version = "4.9.1"

//noinspection GroovyUnusedAssignment
def cloth_config_api_version = "4.11.26"

// Jar attributes
archivesBaseName = "${mod_id}-${mc_version}"

def jar_attributes = [
    "Specification-Title"     : "${mod_id}",
    "Specification-Vendor"    : "${vendor}",
    "Specification-Version"   : "1",
    "Implementation-Title"    : project.name,
    "Implementation-Version"  : "${version}",
    "Implementation-Vendor"   : "${vendor}",
    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    "Maven-Artifact"          : "${maven_artifact}"
]

def mod_properties = [
    modid: mod_id,
    display: display_name,
    version: project.version,
    mcversion: mc_version,
    vendor: vendor,
    authors: authors,
    credits: credits,
    license: license,
    page: page,
    issue_tracker: issue_tracker,
    update_json: update_json,
    logo_file: logo_file,
    description: description,
    group: group,
    class_name: classname,
    group_slashed: group_slashed,

    cloth_config_api_version: cloth_config_api_version
]

// Java options -------------------------------------------------------------------

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

// Unicode support
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

java {
    withSourcesJar()
}

// Minecraft options --------------------------------------------------------------

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // mappings channel: 'official', version: '1.16.5'

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Run configurations
    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')

            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                simpleconfig {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')

            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                simpleconfig {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Project dependencies -----------------------------------------------------------

repositories {
    maven {
        url 'https://repo.maven.apache.org/maven2'
        name 'Maven Central'
    }
}

dependencies {
    // IDE
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // ANTLR
    antlr "org.antlr:antlr4:$antlr_version" // use ANTLR version 4

    // Minecraft
    minecraft "net.minecraftforge:forge:${forge_version}"
}

// Tasks --------------------------------------------------------------------------

classes.dependsOn extractNatives // Make sure the natives are extracted on compile

shadowJar {
    manifest {
        attributes(jar_attributes)
    }

    // Include only ANTLR4 runtime in the shadow jar
    dependencies {
        //noinspection GroovyAssignabilityCheck
        include dependency("org.antlr:antlr4:$antlr_version")
    }

    // Relocate the root package
    relocate "org.antlr", "endorh.simpleconfig.shadowed.org.antlr"

    classifier '' // Replace default jar

    // Preferred method to reobfuscate the jar file
    finalizedBy 'reobfJar'
}

reobf {
    shadowJar {}
}

// Jar attributes
jar {
    manifest {
        attributes(jar_attributes)
        attributes 'Maven-Artifact': "${maven_artifact}:deobf"
    }

    classifier ''

    // Preferred method to reobfuscate the jar file
    finalizedBy 'reobfJar'
}

artifacts {
    archives shadowJar
    // archives deobfJar
}

// Process resources
processResources {
    inputs.properties mod_properties
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // Exclude development files
    exclude("**/.dev/**")
    from(sourceSets.main.resources.srcDirs) {
        filesMatching(["**/*.toml", "**/*.mcmeta"]) {
            expand mod_properties
        }
        filesMatching("**/*.json") {
            if (!getPath().contains("/lang/"))
                expand mod_properties
        }
    }
}

// Publishing
publishing {
    publications {
        mod(MavenPublication) {
            artifact jar
            artifact sourcesJar

            pom {
                name = display_name
                url = page
                properties = [
                    description: description
                ]
            }
        }
    }
    repositories {
        maven {
            name "LocalMods"
            url "${project.projectDir.parentFile.toURI()}maven"
        }
    }
    println "Local mods maven repository: ${project.projectDir.parentFile.toURI()}maven"
}
