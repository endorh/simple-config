import net.minecraftforge.gradle.common.tasks.ApplyRangeMap
import net.minecraftforge.gradle.common.tasks.ExtractExistingFiles
import net.minecraftforge.gradle.common.tasks.ExtractRangeMap
import net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace
import java.text.SimpleDateFormat
import java.util.*

buildscript {
    repositories {
        maven("https://files.minecraftforge.net/maven")
        mavenCentral()
    }
    dependencies {
        classpath("net.minecraftforge.gradle:ForgeGradle:5.1.+") {
            isChanging = true
        }
    }
}

// Plugins
plugins {
    `java-library`
    kotlin("jvm") version "1.5.21"
    id("net.minecraftforge.gradle")
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("antlr.conventions")
    `maven-publish`
}

val modId = "simpleconfig"
val simpleKonfig = "simplekonfig"
val modGroup = "endorh.simpleconfig"
val githubRepo = "endorh/simple-config"

val antlrVersion: String by extra
object V {
    val api = "1.0.0"
    val kotlinApi = api
    val mod = "1.0.3"
    val minecraft = "1.16.5"
    val forge = "36.1.0"
    val minecraftForge = "$minecraft-$forge"
    val minecraftMod = "$minecraft-$mod"
    object mappings {
        val channel = "snapshot"
        val version = "20201028-1.16.3"
    }
    
    // Dependencies
    val yaml = "1.31"
    val jei = "7.6.1.75"
    val kotlin = "1.5.21"
    val kotlinForForge = "1.14.0"
}

val vendor = "Endor H"
val credits = ""
val authors = "Endor H"
val issueTracker = "https://github.com/$githubRepo/issues"
val page = "https://www.curseforge.com/minecraft/mc-mods/simple-config"
val updateJson = "https://github.com/$githubRepo/raw/updates/updates.json"
val logoFile = "$modId.png"
val modDescription = """
    Provides a simple way for modders to define config files with autogenerated config menus and commands.
    Can also provide, or even replace config menus of other mods.
    
    Users can assign hotkeys to modify config values from within the game, and easily save and apply partial presets, which can be shared on the server.
    To edit server configs, players need to be authorized, or be top level operators.

    Optionally adds a button to the pause menu, which opens the mod list in order to access mod configs in-game . It's also possible to bind a hotkey to open the mod list, edit config hotkeys, or open a specific config menu.
""".trimIndent()

// License
val license = "LGPL"

group = modGroup
version = V.minecraftMod
val groupSlashed = modGroup.replace(".", "/")
val classname = "SimpleConfigMod"

// Attributes
val displayName = "Simple Config"
val apiDisplayName = "Simple Config API"
val kotlinApiDisplayName = "Simple Konfig API"

// Jar manifest attributes
val jarAttributes = mapOf(
    "Specification-Title"      to modId,
    "Specification-Vendor"     to vendor,
    "Specification-Version"    to "1",
    "Implementation-Title"     to project.name,
    "Implementation-Version"   to version,
    "Implementation-Vendor"    to vendor,
    "Implementation-Timestamp" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date()),
)

// Mod properties replaced across resource files
val modProperties = mapOf(
    "modid"         to modId,
    "display"       to displayName,
    "version"       to version,
    "mcversion"     to V.minecraft,
    "vendor"        to vendor,
    "authors"       to authors,
    "credits"       to credits,
    "license"       to license,
    "page"          to page,
    "issue_tracker" to issueTracker,
    "update_json"   to updateJson,
    "logo_file"     to logoFile,
    "description"   to modDescription,
    "group"         to group,
    "class_name"    to classname,
    "group_slashed" to groupSlashed,
)

// Source Sets -----------------------------------------------------------------

val mainSourceSet = sourceSets.main.get()
lateinit var apiSourceSet: SourceSet
lateinit var kotlinApiSourceSet: SourceSet
sourceSets {
    apiSourceSet = create("api")
    kotlinApiSourceSet = create("kotlinApi")
}

mainSourceSet.resources {
    // Include resources generated by data generators.
    srcDir("src/generated/resources")
}

if (project.hasProperty("UPDATE_MAPPINGS")) {
    // Update mappings also in API source set
    tasks.getByName<ExtractRangeMap>("extractRangeMap") {
        sources.from(apiSourceSet.java.srcDirs)
    }
    tasks.getByName<ApplyRangeMap>("applyRangeMap") {
        sources.from(apiSourceSet.java.srcDirs)
    }
    tasks.getByName<ExtractExistingFiles>("extractMappedNew") {
        targets.from(apiSourceSet.java.srcDirs)
    }
}

// Java options ----------------------------------------------------------------

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

tasks.withType<JavaCompile>().all {
    options.encoding = "UTF-8"
}

// tasks.withType<>().all {
//     kotlinOptions {
//         jvmTarget = jvmTargetVersion.toString()
//     }
// }

// Console header --------------------------------------------------------------

fun sysProp(name: String) = System.getProperty(name)
println(
    "Mod: \"$displayName\" ($modId), version: ${V.minecraft}-${V.mod} (Forge: ${V.forge})")
println(
    "Java: ${sysProp("java.version")}, " +
    "JVM: ${sysProp("java.vm.version")}(${sysProp("java.vendor")}), " +
    "Arch: ${sysProp("os.arch")}")

// Minecraft options --------------------------------------------------------------

evaluationDependsOn("kotlinTest")

minecraft {
    mappings(V.mappings.channel, V.mappings.version)
    
    // Run configurations
    runs {
        val client = create("client") {
            // Separate client and server run configurations,
            //   to debug different common config files
            workingDirectory(file("run/client"))
            
            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")
            
            // Configure mixins for deobf environment
            property("mixin.env.disableRefMap", "true")
            
            mods {
                create(modId) {
                    sources(
                        mainSourceSet,
                        apiSourceSet,
                    )
                }
            }
        }
        
        create("server") {
            // Separate client and server run configurations,
            //   to debug different common config files
            workingDirectory(file("run/server"))
            
            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")
    
            // Configure mixins for deobf environment
            property("mixin.env.disableRefMap", "true")
            
            // The integrated IDE console is enough
            arg("nogui")
            
            mods {
                create(modId) {
                    sources(
                        mainSourceSet,
                        apiSourceSet,
                    )
                }
            }
        }
        
        // Second client, for multiplayer tests
        create("client2") {
            parent(client)
            args("--username", "Dev2")
        }
    }
}

// Repositories ----------------------------------------------------------------

repositories {
    maven("https://repo.maven.apache.org/maven2") {
        name = "Maven Central"
    }
    maven("https://www.cursemaven.com") {
        name = "Curse Maven" // Curse Maven
        content {
            includeGroup("curse.maven")
        }
    }
    maven("https://modmaven.k-4u.nl") {
        name = "ModMaven" // JEI fallback
    }
    maven("https://thedarkcolour.github.io/KotlinForForge/") {
        name = "Kotlin for Forge"
    }
}

// Dependencies ----------------------------------------------------------------

lateinit var apiImplementation: Configuration
lateinit var kotlinApiImplementation: Configuration
lateinit var copiedForRuntime: Configuration
configurations {
    apiImplementation = getByName(apiSourceSet.implementationConfigurationName).apply {
        extendsFrom(minecraft.get())
    }
    kotlinApiImplementation = getByName(kotlinApiSourceSet.implementationConfigurationName).apply {
        extendsFrom(minecraft.get())
        extendsFrom(apiImplementation)
    }
    implementation.get().apply {
        extendsFrom(apiImplementation)
    }
}

dependencies {
    // Development tools
    apiImplementation("org.jetbrains:annotations:23.0.0")
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.0")
    
    // Minecraft
    minecraft("net.minecraftforge:forge:${V.minecraftForge}")
    
    // API source set
    implementation(apiSourceSet.output)
    
    // Kotlin API
    kotlinApiImplementation(apiSourceSet.output)
    kotlinApiImplementation(mainSourceSet.output)
    kotlinApiImplementation("thedarkcolour:kotlinforforge:${V.kotlinForForge}")
    
    // Snake yaml
    implementation("org.yaml:snakeyaml:${V.yaml}")
    
    // Testing dependencies
    // Catalogue
    runtimeOnly(fg.deobf("curse.maven:catalogue-459701:3529457"))
    
    // Configured
    runtimeOnly(fg.deobf("curse.maven:configured-457570:3780620"))
    
    // JEI
    runtimeOnly(fg.deobf("mezz.jei:jei-${V.minecraft}:${V.jei}"))
}

// Tasks --------------------------------------------------------------------------

tasks.withType<Test> {
    useJUnitPlatform()
}

tasks.classes {
    dependsOn(tasks.extractNatives.get())
}

lateinit var reobfShadowJar: RenameJarInPlace
lateinit var reobfJar: RenameJarInPlace
reobf {
    reobfShadowJar = create("shadowJar")
    reobfJar = create("jar")
}

tasks.shadowJar {
    archiveBaseName.set("$modId-${V.minecraft}")
    archiveClassifier.set("") // Replace default jar
    
    from(apiSourceSet.output)
    from(kotlinApiSourceSet.output)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    dependencies {
        include(dependency("org.antlr:antlr4:$antlrVersion"))
        include(dependency("org.antlr:antlr4-runtime:$antlrVersion"))
        include(dependency("org.yaml:snakeyaml:${V.yaml}"))
    }
    
    val shadowRoot = "$group.shadowed"
    val relocatedPackages = listOf(
        "org.antlr",
        "org.yaml.snakeyaml",
    )
    relocatedPackages.forEach { relocate(it, "$shadowRoot.$it") }
    
    manifest {
        attributes(jarAttributes)
    }
    
    finalizedBy(reobfShadowJar)
}

val sourcesJarTask = tasks.register<Jar>("sourcesJar") {
    group = "build"
    archiveClassifier.set("sources")
    
    from(mainSourceSet.allJava)
    from(apiSourceSet.allJava)
    from(kotlinApiSourceSet.allSource)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes(jarAttributes)
    }
}

val apiJarTask = tasks.register<Jar>("apiJar") {
    group = "build"
    archiveBaseName.set("$modId-${V.minecraft}-api")
    archiveClassifier.set("")
    
    from(apiSourceSet.output)
    
    manifest {
        attributes(jarAttributes)
    }
}

val apiSourcesJarTask = tasks.register<Jar>("apiSourcesJar") {
    group = "build"
    archiveBaseName.set("$modId-${V.minecraft}-api")
    archiveClassifier.set("sources")
    
    from(apiSourceSet.allJava)
    
    manifest {
        attributes(jarAttributes)
    }
}

val kotlinApiJarTask = tasks.register<Jar>("kotlinApiJar") {
    group = "build"
    archiveBaseName.set("$simpleKonfig-${V.minecraft}-api")
    archiveClassifier.set("")
    
    from(kotlinApiSourceSet.output)
    from(apiSourceSet.output)
    
    manifest {
        attributes(jarAttributes)
    }
}

val kotlinApiSourcesJarTask = tasks.register<Jar>("kotlinApiSourcesJar") {
    group = "build"
    archiveBaseName.set("$simpleKonfig-${V.minecraft}-api")
    archiveClassifier.set("sources")
    
    from(kotlinApiSourceSet.allSource)
    from(apiSourceSet.allJava)
    
    manifest {
        attributes(jarAttributes)
    }
}

// Jar attributes
tasks.jar {
    archiveClassifier.set("flat")
    
    manifest {
        attributes(jarAttributes)
    }
    
    finalizedBy(reobfJar)
}

artifacts {
    archives(tasks.shadowJar.get())
    archives(sourcesJarTask.get())
}

// Process resources
tasks.processResources {
    inputs.properties(modProperties)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    
    // Exclude development files
    exclude("**/.dev/**")
    
    from(mainSourceSet.resources.srcDirs) {
        // Expand properties in manifest files
        filesMatching(listOf("**/*.toml", "**/*.mcmeta")) {
            expand(modProperties)
        }
        // Expand properties in JSON resources except for translations
        filesMatching("**/*.json") {
            if (!path.contains("/lang/"))
                expand(modProperties)
        }
    }
}

// Publishing ------------------------------------------------------------------

artifacts {
    archives(tasks.shadowJar.get())
    archives(apiJarTask.get())
    archives(kotlinApiJarTask.get())
    archives(sourcesJarTask.get())
    archives(apiSourcesJarTask.get())
    archives(kotlinApiSourcesJarTask.get())
}

publishing {
    repositories {
        maven("https://maven.pkg.github.com/$githubRepo") {
            name = "GitHubPackages"
            credentials {
                username = project.findProperty("gpr.user") as String? ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") as String? ?: System.getenv("TOKEN")
            }
        }
        
        maven(rootProject.projectDir.parentFile.resolve("maven")) {
            name = "LocalMods"
        }
    }
    
    publications {
        register<MavenPublication>("mod") {
            artifactId = "$modId-${V.minecraft}"
            version = V.mod
    
            artifact(tasks.shadowJar.get())
            artifact(sourcesJarTask.get())
    
            pom {
                name.set(displayName)
                url.set(page)
                description.set(modDescription)
            }
        }
        
        register<MavenPublication>("api") {
            artifactId = "$modId-${V.minecraft}-api"
            version = V.api
    
            artifact(apiJarTask.get())
            artifact(apiSourcesJarTask.get())
    
            pom {
                name.set(apiDisplayName)
                url.set(page)
                description.set(modDescription)
            }
        }
    
        publications {
            register<MavenPublication>("kotlinApi") {
                artifactId = "$simpleKonfig-${V.minecraft}-api"
                version = V.kotlinApi
    
                artifact(kotlinApiJarTask.get())
                artifact(kotlinApiSourcesJarTask.get())
    
                pom {
                    name.set(kotlinApiDisplayName)
                    url.set(page)
                    description.set(modDescription)
                }
            }
        }
    }
}
