import net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace
import java.text.SimpleDateFormat
import java.util.*

buildscript {
    repositories {
        maven("https://files.minecraftforge.net/maven")
        mavenCentral()
    }
    dependencies {
        classpath("net.minecraftforge.gradle:ForgeGradle:5.1.+") {
            isChanging = true
        }
    }
}

// Plugins
plugins {
    id("simpleconfig.conventions")
    id("antlr.conventions")
    `maven-publish`
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

// Mod info -----------------------------------------------------------------------

val modId: String by extra
val apiProject = project(":api")

val modVersion: String by extra
val mcVersion: String by extra
val modGroup: String by extra
group = modGroup
version = "$mcVersion-$modVersion"
val groupSlashed = modGroup.replace(".", "/")
val classname = "SimpleConfigMod"
val modMavenArtifact: String by extra

// Attributes
val displayName = "Simple Config"
val vendor: String by extra
val credits: String by extra
val authors: String by extra
val issueTracker: String by extra
val page: String by extra
val updateJson: String by extra
val logoFile: String by extra
val modDescription: String by extra
val license: String by extra

// Dependencies
val antlrVersion: String by extra
// FIXME: Update to 1.31 when available (bitbucket.org/snakeyaml/snakeyaml/issues/518)
val yamlVersion = "1.30"
val jeiVersion = "7.6.1.75"

// Jar attributes
val modArchiveBaseName: String by extra

val jarAttributes = mapOf(
    "Specification-Title"      to modId,
    "Specification-Vendor"     to vendor,
    "Specification-Version"    to "1",
    "Implementation-Title"     to project.name,
    "Implementation-Version"   to version,
    "Implementation-Vendor"    to vendor,
    "Implementation-Timestamp" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date()),
    "Maven-Artifact"           to modMavenArtifact
)

val modProperties = mapOf(
    "modid"         to modId,
    "display"       to displayName,
    "version"       to version,
    "mcversion"     to mcVersion,
    "vendor"        to vendor,
    "authors"       to authors,
    "credits"       to credits,
    "license"       to license,
    "page"          to page,
    "issue_tracker" to issueTracker,
    "update_json"   to updateJson,
    "logo_file"     to logoFile,
    "description"   to modDescription,
    "group"         to group,
    "class_name"    to classname,
    "group_slashed" to groupSlashed,
)

project.evaluationDependsOn(":api")

// Minecraft options --------------------------------------------------------------

minecraft {
    // Run configurations
    runs {
        val client = create("client") {
            workingDirectory(file("run/client"))
            
            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")
            property("mixin.env.disableRefMap", "true")
            
            mods {
                create(modId) {
                    source(sourceSets.main.get())
                    source(apiProject.sourceSets.main.get())
                }
            }
        }
        
        create("server") {
            workingDirectory(file("run/server"))
            
            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")
            property("mixin.env.disableRefMap", "true")
            
            arg("nogui")
            
            mods {
                create(modId) {
                    source(sourceSets.main.get())
                    source(apiProject.sourceSets.main.get())
                }
            }
        }
        
        create("client2") {
            parent(client)
            args("--username", "Dev2")
        }
    }
}

// Source Sets --------------------------------------------------------------------

// Include resources generated by data generators.
sourceSets.main.get().resources {
    srcDir("src/generated/resources")
}

// Project dependencies -----------------------------------------------------------

repositories {
    maven("https://modmaven.k-4u.nl") {
        name = "ModMaven" // JEI fallback
    }
}

dependencies {
    compileOnly(apiProject)
    // Forge doesn't pick the FMLModType manifest attribute for runs, unless we
    //   explicitly use the jar as dependency, after moving it from its default
    //   location. (Gradle maybe caches classes for internal jar dependencies?)
    runtimeOnly(apiProject.files("${apiProject.buildDir}/api.jar"))
    
    // Snake yaml
    implementation("org.yaml:snakeyaml:$yamlVersion")
    
    // Testing dependencies
    // Catalogue
    runtimeOnly(fg.deobf("curse.maven:catalogue-459701:3529457"))
    
    // Configured
    runtimeOnly(fg.deobf("curse.maven:configured-457570:3780620"))
    
    // JEI
    runtimeOnly(fg.deobf("mezz.jei:jei-${mcVersion}:${jeiVersion}"))
}

tasks.withType<Test> {
    useJUnitPlatform()
}

// Tasks --------------------------------------------------------------------------

tasks.classes {
    dependsOn(tasks.extractNatives.get())
}

lateinit var reobfShadowJar: RenameJarInPlace
lateinit var reobfJar: RenameJarInPlace
reobf {
    reobfShadowJar = create("shadowJar")
    reobfJar = create("jar")
}

tasks.shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(apiProject.sourceSets.main.get().output)
    
    manifest {
        attributes(jarAttributes)
    }
    
    dependencies {
        include(dependency("org.antlr:antlr4:$antlrVersion"))
        include(dependency("org.antlr:antlr4-runtime:$antlrVersion"))
        include(dependency("org.yaml:snakeyaml:$yamlVersion"))
    }
    
    // Relocate the root package
    relocate("org.antlr", "endorh.simpleconfig.shadowed.org.antlr")
    relocate("org.yaml.snakeyaml", "endorh.simpleconfig.shadowed.org.yaml.snakeyaml")
    
    archiveClassifier.set("") // Replace default jar
    finalizedBy(reobfShadowJar)
}

val sourcesJarTask = tasks.register<Jar>("sourcesJar") {
    group = "build"
    from(sourceSets.main.get().allJava)
    from(apiProject.sourceSets.main.get().allJava)
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set("sources")
}

// Jar attributes
tasks.jar {
    manifest {
        attributes(jarAttributes)
        attributes(mapOf("Maven-Artifact" to "$modMavenArtifact:deobf"))
    }
    
    archiveClassifier.set("unshadowed")
    finalizedBy(reobfJar)
}

artifacts {
    archives(tasks.shadowJar.get())
    archives(sourcesJarTask.get())
}

// Process resources
tasks.processResources {
    inputs.properties(modProperties)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    
    // Exclude development files
    exclude("**/.dev/**")
    from(sourceSets.main.get().resources.srcDirs) {
        filesMatching(listOf("**/*.toml", "**/*.mcmeta")) {
            expand(modProperties)
        }
        filesMatching("**/*.json") {
            if (!path.contains("/lang/"))
                expand(modProperties)
        }
    }
}

// Publishing
publishing {
    publications {
        register<MavenPublication>("mod") {
            artifact(tasks.shadowJar.get())
            artifact(sourcesJarTask.get())
            
            pom {
                name.set(displayName)
                url.set(page)
                description.set(modDescription)
            }
        }
    }
    
    repositories {
        maven(rootProject.projectDir.parentFile.resolve("maven")) {
            name = "LocalMods"
        }
    }
}
